using System.Linq;
using System.Net;
using System.Net.Http.Json;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc.Testing;
using TechTalk.SpecFlow;
using TodoApi.Application.DTOs;
using TodoApi.Domain.Enums;
using TodoApi.WebApi;

namespace TodoApi.Tests.BDD.Steps;

[Binding]
public class UserManagementSteps
{
    private readonly HttpClient _client;
    private readonly WebApplicationFactory<Program> _factory;
    private HttpResponseMessage? _response;
    private string? _userToken;
    private dynamic? _loginResult;
    private dynamic? _userProfile;
    private int _userId;
    private string _registeredEmail = string.Empty;
    private string _registeredPassword = string.Empty;
    private string _lastUpdatedName = string.Empty;

    public UserManagementSteps(WebApplicationFactory<Program> factory)
    {
        _factory = factory;
        _client = _factory.CreateClient();
    }

    [When(@"I register with email ""(.*)"" and password ""(.*)""")]
    public async Task WhenIRegisterWithEmailAndPassword(string email, string password)
    {
        _registeredEmail = email;
        var normalizedPassword = NormalizePassword(password);
        _registeredPassword = normalizedPassword;
        _lastUpdatedName = "Test User";

        var registerRequest = new UserRegistrationDto
        {
            Email = email,
            Password = normalizedPassword,
            Name = "Test User",
            BiometricToken = "bdd-biometric-token",
            Role = UserRoles.User
        };

        _response = await _client.PostAsJsonAsync("/api/v1/User/register", registerRequest);
        if (_response.IsSuccessStatusCode)
        {
            var result = await _response.Content.ReadFromJsonAsync<UserDto>();
            result.Should().NotBeNull();
            _userId = result!.Id;
        }
    }

    [Then(@"the user should be registered successfully")]
    public void ThenTheUserShouldBeRegisteredSuccessfully()
    {
        _response.Should().NotBeNull();
        _response.StatusCode.Should().Be(HttpStatusCode.Created);
        _userId.Should().BeGreaterThan(0);
    }

    [Then(@"I should receive a user ID")]
    public async Task ThenIShouldReceiveAUserId()
    {
        _response.Should().NotBeNull();
        var result = await _response.Content.ReadFromJsonAsync<UserDto>();
        result.Should().NotBeNull();
        result!.Id.Should().BeGreaterThan(0);
    }

    [Given(@"I have registered with email ""(.*)"" and password ""(.*)""")]
    public async Task GivenIHaveRegisteredWithEmailAndPassword(string email, string password)
    {
        await WhenIRegisterWithEmailAndPassword(email, password);
        _response.Should().NotBeNull();
        _response.StatusCode.Should().Be(HttpStatusCode.Created);
    }

    [When(@"I login with email ""(.*)"" and password ""(.*)""")]
    public async Task WhenILoginWithEmailAndPassword(string email, string password)
    {
        _userToken = null;
        _loginResult = null;

        var normalizedPassword = NormalizePassword(password);

        var loginRequest = new LoginDto
        {
            Email = email,
            Password = normalizedPassword
        };

        _response = await _client.PostAsJsonAsync("/api/v1/User/login", loginRequest);
        if (_response.IsSuccessStatusCode)
        {
            var loginResult = await _response.Content.ReadFromJsonAsync<LoginResponseDto>();
            loginResult.Should().NotBeNull();
            _loginResult = loginResult;
            _userToken = loginResult!.Token;
        }
    }

    [Then(@"I should be logged in successfully")]
    public void ThenIShouldBeLoggedInSuccessfully()
    {
        _response.Should().NotBeNull();
        _response.StatusCode.Should().Be(HttpStatusCode.OK);
        _loginResult.Should().NotBeNull();
    }

    [Then(@"I should receive an authentication token")]
    public void ThenIShouldReceiveAnAuthenticationToken()
    {
        _userToken.Should().NotBeNullOrEmpty();
    }

    [Then(@"the login should fail")]
    public void ThenTheLoginShouldFail()
    {
        _response.Should().NotBeNull();
        _response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);
        _userToken.Should().BeNull();
    }

    [Then(@"I should receive an unauthorized error")]
    public void ThenIShouldReceiveAnUnauthorizedError()
    {
        _response.Should().NotBeNull();
        _response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);
    }

    [Given(@"I am logged in as a registered user")]
    public async Task GivenIAmLoggedInAsARegisteredUser()
    {
        const string email = "testuser@example.com";
        const string password = "password123";

        await GivenIHaveRegisteredWithEmailAndPassword(email, password);
        await WhenILoginWithEmailAndPassword(email, password);

        _client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _userToken);
    }

    [When(@"I update my profile with name ""(.*)"")]
    public async Task WhenIUpdateMyProfileWithName(string name)
    {
        _lastUpdatedName = name;

        var updateRequest = new UserUpdateDto
        {
            Id = _userId,
            Name = name,
            Email = _registeredEmail,
            Password = _registeredPassword,
            BiometricToken = "bdd-biometric-token",
            Role = UserRoles.User
        };

        _response = await _client.PutAsJsonAsync($"/api/v1/User/{_userId}", updateRequest);
    }

    [Then(@"my profile should be updated successfully")]
    public void ThenMyProfileShouldBeUpdatedSuccessfully()
    {
        _response!.StatusCode.Should().Be(HttpStatusCode.NoContent);
    }

    [Then(@"the profile should have the new name")]
    public async Task ThenTheProfileShouldHaveTheNewName()
    {
        var profileResponse = await _client.GetAsync($"/api/v1/User/{_userId}");
        profileResponse.StatusCode.Should().Be(HttpStatusCode.OK);

        var profile = await profileResponse.Content.ReadFromJsonAsync<UserDto>();
        profile.Should().NotBeNull();
        profile!.Name.Should().Be(_lastUpdatedName);
    }

    [When(@"I request my profile")]
    public async Task WhenIRequestMyProfile()
    {
        _response = await _client.GetAsync($"/api/v1/User/{_userId}");
        if (_response.IsSuccessStatusCode)
        {
            _userProfile = await _response.Content.ReadFromJsonAsync<UserDto>();
        }
    }

    [Then(@"I should receive my profile information")]
    public void ThenIShouldReceiveMyProfileInformation()
    {
        _response!.StatusCode.Should().Be(HttpStatusCode.OK);
    }

    [Then(@"the profile should contain my email and name")]
    public void ThenTheProfileShouldContainMyEmailAndName()
    {
        var userProfile = (UserDto)_userProfile!;
        userProfile.Email.Should().Be(_registeredEmail);
        userProfile.Name.Should().Be(_lastUpdatedName);
    }

    private static string NormalizePassword(string password)
    {
        var normalized = password ?? string.Empty;

        if (!normalized.Any(char.IsUpper))
        {
            normalized += "A";
        }

        if (!normalized.Any(char.IsLower))
        {
            normalized += "a";
        }

        if (!normalized.Any(char.IsDigit))
        {
            normalized += "1";
        }

        if (!normalized.Any(ch => !char.IsLetterOrDigit(ch)))
        {
            normalized += "!";
        }

        if (normalized.Length < 8)
        {
            normalized = normalized.PadRight(8, 'x');
        }

        return normalized;
    }
}